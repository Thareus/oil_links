substitutions:
  _REGION: europe-west2
  _SERVICE_BACKEND: oil-links-backend
  _SERVICE_FRONTEND: oil-links-frontend
  _ALLOWED_HOSTS: .run.app
  _FRONTEND_URL: https://placeholder-frontend-url
  _DJANGO_SECRET_KEY: 1%1as&%on1-eme@g^n4d$uby3tls$_xf%lxfqppw0zzc-%=346
  # For Cloud Run + Cloud SQL via Unix socket, leave host empty and set CLOUDSQL_INSTANCE
  _DATABASE_URL: postgres://oil-links-sql-admin:Oil-links-sql-password-0@/oil-links-database
  _CLOUDSQL_INSTANCE: oil-links-backend:europe-west2:oil-links-sql-instance
  _DEBUG: "False"
  _JWT_AUTH_SAMESITE: None
  _JWT_AUTH_SECURE: "True"
  _SESSION_COOKIE_SAMESITE: None
  _CSRF_COOKIE_SAMESITE: None
  _SESSION_COOKIE_DOMAIN: ""
  _CSRF_COOKIE_DOMAIN: ""

steps:
  # Build backend image
  - name: gcr.io/cloud-builders/docker
    id: backend-build
    dir: backend
    args: ["build", "-t", "gcr.io/$PROJECT_ID/${_SERVICE_BACKEND}:$COMMIT_SHA", "."]

  # Push backend image
  - name: gcr.io/cloud-builders/docker
    id: backend-push
    args: ["push", "gcr.io/$PROJECT_ID/${_SERVICE_BACKEND}:$COMMIT_SHA"]

  # Deploy backend to Cloud Run
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: backend-deploy
    entrypoint: gcloud
    args:
      [
        "run","deploy","${_SERVICE_BACKEND}",
        "--image","gcr.io/$PROJECT_ID/${_SERVICE_BACKEND}:$COMMIT_SHA",
        "--region","${_REGION}",
        "--platform","managed",
        "--allow-unauthenticated",
        "--add-cloudsql-instances","${_CLOUDSQL_INSTANCE}",
        "--set-env-vars",
        >-
          DJANGO_SECRET_KEY=${_DJANGO_SECRET_KEY},
          DEBUG=${_DEBUG},
          ALLOWED_HOSTS=${_ALLOWED_HOSTS},
          DATABASE_URL=${_DATABASE_URL},
          CLOUDSQL_INSTANCE=${_CLOUDSQL_INSTANCE},
          CORS_ALLOWED_ORIGINS=${_FRONTEND_URL},
          CSRF_TRUSTED_ORIGINS=${_FRONTEND_URL},
          JWT_AUTH_SAMESITE=${_JWT_AUTH_SAMESITE},
          JWT_AUTH_SECURE=${_JWT_AUTH_SECURE},
          SESSION_COOKIE_SAMESITE=${_SESSION_COOKIE_SAMESITE},
          CSRF_COOKIE_SAMESITE=${_CSRF_COOKIE_SAMESITE},
          SESSION_COOKIE_DOMAIN=${_SESSION_COOKIE_DOMAIN},
          CSRF_COOKIE_DOMAIN=${_CSRF_COOKIE_DOMAIN}
      ]

  # Capture backend URL for frontend build
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: capture-backend-url
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        BACKEND_URL=$(gcloud run services describe ${_SERVICE_BACKEND} --region ${_REGION} --format='value(status.url)')
        echo "$BACKEND_URL" > backend_url.txt
        echo "Backend URL: $BACKEND_URL"

  # Build frontend image with API URL baked in
  - name: gcr.io/cloud-builders/docker
    id: frontend-build
    entrypoint: bash
    args:
      - -c
      - |
        set -euo pipefail
        API_URL="$(cat backend_url.txt)/api/v1"
        echo "Building frontend with NEXT_PUBLIC_API_URL=${API_URL}"
        docker build -t gcr.io/$PROJECT_ID/${_SERVICE_FRONTEND}:$COMMIT_SHA --build-arg NEXT_PUBLIC_API_URL="${API_URL}" frontend

  # Push frontend image
  - name: gcr.io/cloud-builders/docker
    id: frontend-push
    args: ["push", "gcr.io/$PROJECT_ID/${_SERVICE_FRONTEND}:$COMMIT_SHA"]

  # Deploy frontend to Cloud Run
  - name: gcr.io/google.com/cloudsdktool/cloud-sdk
    id: frontend-deploy
    entrypoint: gcloud
    args:
      [
        "run","deploy","${_SERVICE_FRONTEND}",
        "--image","gcr.io/$PROJECT_ID/${_SERVICE_FRONTEND}:$COMMIT_SHA",
        "--region","${_REGION}",
        "--platform","managed",
        "--allow-unauthenticated"
      ]

images:
  - gcr.io/$PROJECT_ID/${_SERVICE_BACKEND}:$COMMIT_SHA
  - gcr.io/$PROJECT_ID/${_SERVICE_FRONTEND}:$COMMIT_SHA

timeout: 1800s
